# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BlogEntity {
  blogPost: [BlogPostEntity!]
  createdAt: DateTime!
  id: ID!

  """name of the blog"""
  name: String!
  updatedAt: DateTime!
  user: UserEntity!
}

type BlogPostEntity {
  blog: BlogEntity!
  createdAt: DateTime!
  id: ID!

  """message of the blog-post"""
  message: String!

  """title of the blog-post"""
  title: String!
  updatedAt: DateTime!
  user: UserEntity!
}

input CreateBlogInput {
  name: String!
}

input CreateBlogPostInput {
  blogId: Float!
  message: String!
  title: String!
}

input CreateUserInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  access_token: String!
  refresh_token: String!
  user: UserEntity!
}

type Mutation {
  createBlog(createBlog: CreateBlogInput!): BlogEntity!
  createBlogPost(createBlogPost: CreateBlogPostInput!): BlogPostEntity!
  login(login: LoginInput!): LoginResponse!
  refreshToken(refresh: RefreshInput!): RefreshResponse!
  removeBlog(id: Float!): Float!
  removeBlogPost(id: Float!): Float!
  removeUser(id: Float!): Float!
  signup(createUserDto: CreateUserInput!): LoginResponse!
  updateBlog(updateBlog: UpdateBlogInput!): BlogEntity!
  updateBlogPost(updateBlogPost: UpdateBlogPostInput!): BlogPostEntity!
  updateUser(updateUser: UpdateUserInput!): UserEntity!
}

type Query {
  countBLog(skip: Int! = 0, take: Int! = 25, title: String! = ""): Float!
  countBlogPost(skip: Int! = 0, take: Int! = 25, title: String! = ""): Float!
  countUser: Float!
  getAllBlogPosts(skip: Int! = 0, take: Int! = 25, title: String! = ""): [BlogPostEntity!]!
  getAllBlogs(skip: Int! = 0, take: Int! = 25, title: String! = ""): [BlogEntity!]!
  getAllUsers: [UserEntity!]!
  getOneBlockPost(id: Float!): BlogPostEntity!
  getOneUser(id: Float!): BlogEntity!
}

input RefreshInput {
  access_token: String!
  id: Float!
  refresh_token: String!
}

type RefreshResponse {
  access_token: String!
  id: Float!
  refresh_token: String!
}

input UpdateBlogInput {
  id: ID!
  name: String!
}

input UpdateBlogPostInput {
  id: ID!
  title: String!
}

input UpdateUserInput {
  email: String
  firstName: String
  id: ID!
  lastName: String
  refreshToken: String
}

type UserEntity {
  blogPost: [BlogPostEntity!]
  blogs: [BlogEntity!]
  createdAt: DateTime!

  """email of the user"""
  email: String!

  """first name of the user"""
  firstName: String!
  id: ID!

  """last name of the user"""
  lastName: String!
  password: String!

  """refreshToken of the user"""
  refreshToken: String!

  """email of the user"""
  role: String!
  updatedAt: DateTime!
}